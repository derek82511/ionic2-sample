import { ElementRef, EventEmitter } from 'angular2/core';
import { NgControl } from 'angular2/common';
import { Ion } from '../ion';
import { Config } from '../../config/config';
/**
* @private
*/
export declare class SearchbarInput {
    private stopInput(ev);
    constructor(elementRef: ElementRef);
}
/**
 * @name Searchbar
 * @module ionic
 * @description
 * Manages the display of a Searchbar which can be used to search or filter items.
 *
 * @usage
 * ```html
 * <ion-searchbar [(ngModel)]="defaultSearch" (input)="triggerInput($event)" (cancel)="onCancelSearchbar($event)" (clear)="onClearSearchbar($event)"></ion-searchbar>
 * ```
 *
 * @property {string} [cancelButtonText=Cancel] - Sets the cancel button text to the value passed in
 * @property {boolean} [hideCancelButton=false] - Hides the cancel button
 * @property {string} [placeholder=Search] - Sets input placeholder to the value passed in
 *
 * @property {Any} [input] - Expression to evaluate when the Searchbar input has changed
 * @property {Any} [cancel] - Expression to evaluate when the cancel button is clicked.
 * @property {Any} [clear] - Expression to evaluate when the clear input button is clicked.
 *
 * @see {@link /docs/v2/components#search Search Component Docs}
 */
export declare class Searchbar extends Ion {
    searchbarInput: any;
    cancelButtonText: string;
    hideCancelButton: any;
    placeholder: string;
    ngModel: any;
    input: EventEmitter<Searchbar>;
    cancel: EventEmitter<Searchbar>;
    clear: EventEmitter<Searchbar>;
    value: string;
    blurInput: boolean;
    isFocused: any;
    shouldLeftAlign: any;
    private inputChanged(ev);
    constructor(elementRef: ElementRef, config: Config, ngControl: NgControl);
    /**
     * @private
     * On Initialization check for attributes
     */
    ngOnInit(): void;
    /**
     * @private
     * After View Initialization check the value
     */
    ngAfterViewInit(): void;
    /**
     * @private
     * Sets the Searchbar to focused and aligned left on input focus.
     */
    inputFocused(): void;
    /**
     * @private
     * Sets the Searchbar to not focused and checks if it should align left
     * based on whether there is a value in the searchbar or not.
     */
    inputBlurred(): void;
    /**
     * @private
     * Clears the input field and triggers the control change.
     */
    clearInput(): void;
    /**
     * @private
     * Clears the input field and tells the input to blur since
     * the clearInput function doesn't want the input to blur
     * then calls the custom cancel function if the user passed one in.
     */
    cancelSearchbar(): void;
    /**
     * @private
     * Write a new value to the element.
     */
    writeValue(value: any): void;
    onChange: (_: any) => void;
    onTouched: () => void;
    /**
     * @private
     * Set the function to be called when the control receives a change event.
     */
    registerOnChange(fn: (_: any) => {}): void;
    /**
     * @private
     * Set the function to be called when the control receives a touch event.
     */
    registerOnTouched(fn: () => {}): void;
}
